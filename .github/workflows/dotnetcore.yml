name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    - name: Build
      run: dotnet pack --configuration Release -o output


    - id: get-version-number
      name: Get version number
      run: |
        PACKAGE_VERSION=$(grep -Po '(?<=Version>).*(?=</Version>)' Useful.String.Extensions/Useful.String.Extensions.csproj)
        echo "Package version is '${PACKAGE_VERSION}'"
        echo ::set-env name=PACKAGE_VERSION::$PACKAGE_VERSION


    - id: get-release-notes
      name: Get release notes
      run: |
        RELEASE_NOTES="$(grep -Pzo '(?<=PackageReleaseNotes>)(.|\n)*(?=</PackageReleaseNotes>)' Useful.String.Extensions/Useful.String.Extensions.csproj)"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo "Release notes are:"
        echo ${RELEASE_NOTES}
        echo "::set-env name=RELEASE_NOTES::$RELEASE_NOTES"


    - id: get-file-name
      name: Get file name
      run: |
        FILE_NAME=$(ls output/)
        echo "Name of nuget package is '${FILE_NAME}'."
        echo "::set-env name=FILE_NAME::$FILE_NAME"


    #- name: Publish NuGet
      #run: dotnet nuget push "output/${{ env.FILE_NAME }}" -k ${{ secrets.NugetAPIKey }} -s https://api.nuget.org/v3/index.json
      #uses: rohith/publish-nuget@v2.2.1
      #with:
        ## Filepath of the project to be packaged, relative to root of repository
        #PROJECT_FILE_PATH: Useful.String.Extensions/Useful.String.Extensions.csproj
        ## Whether to create a tag when there's a version change
        #TAG_COMMIT: false
        #NUGET_KEY: ${{ secrets.NugetAPIKey }}


    - name: Publish Github package
      run: dotnet nuget push "output/${{ env.FILE_NAME }}" --source "github"


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CreateReleaseToken }}
      with:
        tag_name: ${{ env.PACKAGE_VERSION }}
        release_name: ${{ env.PACKAGE_VERSION }}
        body: ${{ env.RELEASE_NOTES }}


    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CreateReleaseToken }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "output/${{ env.FILE_NAME }}"
        asset_name: ${{ env.FILE_NAME }}
        asset_content_type: application/zip
